# Tuplex source directory cmakelist

set(CMAKE_VERBOSE_MAKEFILE on)

set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin)

set(BUILD_OUTPUT_PATH ${CMAKE_BINARY_DIR}/build)

set(CMAKE_BUILD_TYPE "Debug")  # Debug Release RelWithDebInfo MinSizeRel


# project name
project(Tuplex)

# the version number
set (Tuplex_VERSION_MAJOR 0)
set (Tuplex_VERSION_MINOR 1)

# configure a header file to pass some of the CMake settings to the source code
configure_file (
  "${CMAKE_CURRENT_SOURCE_DIR}/TuplexConfig.h.in"
  "${BUILD_OUTPUT_PATH}/TuplexConfig.h"
  )

# add to the search path for include files so that we will find TuplexConfig.h
include_directories("${BUILD_OUTPUT_PATH}")


# add to the search path for include files so that we will find our own includes
include_directories("${CMAKE_CURRENT_SOURCE_DIR}")


# add the lexer and parser generation
FIND_PACKAGE(BISON REQUIRED)
FIND_PACKAGE(FLEX REQUIRED)

BISON_TARGET(TxParser parser.y ${BUILD_OUTPUT_PATH}/parser.cpp
	VERBOSE "${BUILD_OUTPUT_PATH}/grammar_output.txt"
        COMPILE_FLAGS "")
# BISON_${Name}_DEFINED - true is the macro ran successfully
# BISON_${Name}_INPUT - The input source file, an alias for <YaccInput>
# BISON_${Name}_OUTPUT_SOURCE - The source file generated by bison
# BISON_${Name}_OUTPUT_HEADER - The header file generated by bison
# BISON_${Name}_OUTPUTS - The sources files generated by bison
# BISON_${Name}_COMPILE_FLAGS - Options used in the bison command line

FLEX_TARGET(TxLexer lexer.l ${BUILD_OUTPUT_PATH}/lexer.cpp
       COMPILE_FLAGS "")
#       COMPILE_FLAGS "-d")
# FLEX_${Name}_DEFINED - true is the macro ran successfully
# FLEX_${Name}_OUTPUTS - the source file generated by the custom rule, an alias for FlexOutput
# FLEX_${Name}_INPUT - the flex source file, an alias for ${FlexInput}

ADD_FLEX_BISON_DEPENDENCY(TxLexer TxParser)


set(LLVM_COMPONENTS core engine interpreter bitwriter)
execute_process(COMMAND llvm-config --includedir OUTPUT_VARIABLE LLVM_INCLUDE_DIRS OUTPUT_STRIP_TRAILING_WHITESPACE)
execute_process(COMMAND llvm-config --libdir OUTPUT_VARIABLE LLVM_LIBRARY_DIRS OUTPUT_STRIP_TRAILING_WHITESPACE)
execute_process(COMMAND llvm-config --libs ${LLVM_COMPONENTS} OUTPUT_VARIABLE REQ_LLVM_LIBRARIES OUTPUT_STRIP_TRAILING_WHITESPACE)
execute_process(COMMAND llvm-config --system-libs ${LLVM_COMPONENTS} OUTPUT_VARIABLE REQ_LLVM_SYS_LIBS OUTPUT_STRIP_TRAILING_WHITESPACE)

include_directories( ${LLVM_INCLUDE_DIRS} )
link_directories( ${LLVM_LIBRARY_DIRS} )

# disabled this since set wierd flags, e.g. -fno-exceptions, and set it manually instead:
#execute_process(COMMAND llvm-config --cxxflags OUTPUT_VARIABLE LLVM_CXX_FLAGS OUTPUT_STRIP_TRAILING_WHITESPACE)
set(LLVM_CXX_FLAGS "-D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS")

execute_process(COMMAND llvm-config --ldflags OUTPUT_VARIABLE LLVM_LD_FLAGS OUTPUT_STRIP_TRAILING_WHITESPACE)



#set(CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} "/usr/share/llvm-3.5/cmake")
#execute_process(COMMAND llvm-config --prefix OUTPUT_VARIABLE CMAKE_PREFIX_PATH)
#message( "Using prefix path: " '${CMAKE_PREFIX_PATH}' )

# needs link from
# /usr/share/llvm-3.5/cmake/LLVMConfig.cmake
# to
# /usr/share/llvm-3.5/cmake/LLVM-Config.cmake
# find_package(LLVM) # PATHS "/usr/share/llvm-3.5/cmake/LLVM-Config.cmake")

# if( NOT LLVM_FOUND )
#   message(FATAL_ERROR "LLVM package can't be found. Set CMAKE_PREFIX_PATH variable to LLVM's installation prefix.")
# endif()

# include_directories( ${LLVM_INCLUDE_DIRS} )
# link_directories( ${LLVM_LIBRARY_DIRS} )

# Let's suppose we want to build a JIT compiler with support for binary code (no interpreter):
# llvm_map_components_to_libraries(REQ_LLVM_LIBRARIES jit native)

# Finally, we link the LLVM libraries to our executable:
# target_link_libraries(txc ${REQ_LLVM_LIBRARIES})


# add the executable
add_executable(txc
    ${FLEX_TxLexer_OUTPUTS}
    ${BISON_TxParser_OUTPUTS}
        files_env.cpp
        logging.cpp
        tx_operations.cpp
        identifier.cpp
        driver.cpp
        main.cpp
        ast.cpp
        ast_lit.cpp
        generics.cpp
        type.cpp
        package.cpp
        module.cpp
        scope.cpp
        declaration.cpp
        entity.cpp
        type_registry.cpp
        type_codegen.cpp
        ast_base_codegen.cpp
        ast_exprs_codegen.cpp
        ast_lit_codegen.cpp
        ast_stmts_codegen.cpp
        ast_fields_codegen.cpp
        ast_types_codegen.cpp
        llvm_generator.cpp
        llvm_exec.cpp
	)

# add compile flags
# -std=c++11
# -std=c++1y
# -fexceptions -fcxx-exceptions 
#SET (CMAKE_C_COMPILER             "/usr/bin/clang")
SET (CMAKE_C_COMPILER             "/usr/bin/gcc")
SET (CMAKE_C_FLAGS                "-Wall -std=c99")
SET (CMAKE_C_FLAGS_DEBUG          "-g")
SET (CMAKE_C_FLAGS_MINSIZEREL     "-Os -DNDEBUG")
SET (CMAKE_C_FLAGS_RELEASE        "-O4 -DNDEBUG")
SET (CMAKE_C_FLAGS_RELWITHDEBINFO "-O2 -g")

#SET (CMAKE_CXX_COMPILER             "/usr/bin/clang++")
SET (CMAKE_CXX_COMPILER             "/usr/bin/gcc")
SET (CMAKE_CXX_FLAGS                "-Wall -Wno-deprecated-register -std=c++11 -pthread")
SET (CMAKE_CXX_FLAGS_DEBUG          "-g")
SET (CMAKE_CXX_FLAGS_MINSIZEREL     "-Os -DNDEBUG")
SET (CMAKE_CXX_FLAGS_RELEASE        "-O4 -DNDEBUG")
SET (CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -g")

set_target_properties(txc PROPERTIES COMPILE_FLAGS "${LLVM_CXX_FLAGS}")
set_target_properties(txc PROPERTIES LINK_FLAGS "${LLVM_LD_FLAGS}")

# when linking with gcc, appending -lstdc++ is required:
target_link_libraries(txc ${REQ_LLVM_LIBRARIES} ${REQ_LLVM_SYS_LIBS} -lstdc++)
