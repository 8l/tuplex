module tx



/** A sequenceable object supports step-wise single direction traversal of its contained elements.
 */
public interface Sequenceable< E > derives Interface {
    
    public abstract sequencer() -> Ref< ~Sequencer< E > >;
}



/** An iterable sequence supports step-wise forward and backward traversal.
 */
public interface Iterable< E > derives Sequenceable< E > {

    public abstract override sequencer() -> Ref< ~Iterator< E > >;
}



/** An indicable sequence is finite and supports random-access.
 * Sequences, sets, and maps are Indicable.
 */
public interface Indicable< K, E > derives Iterable< E > {

    public abstract count() -> Ordinal;

    public abstract has( key : K ) -> Bool;

    public abstract get( key : K ) -> E;
}

/** A modifiable Indicable. */
public interface Updatable< K, E > derives Indicable< K, E > {

    /** Sets the element at the slot identified by key. Returns the replaced element. */
    public abstract set( key : K, element : E ) mod -> E;

    /** Swaps two elements, putting each in the slot previously occupied by the other. */
    public abstract swap( keyA : K, keyB : K ) mod;
}



public interface Sequencer< E > derives Sequenceable< E > {

    public override sequencer() ~ -> Ref< ~Sequencer< E > > { return self; }

    public abstract has_next() -> Bool;

    public abstract next() ~ -> E;
}



public interface Iterator< E > derives Sequencer< E > {

    public override sequencer() ~ -> Ref< ~Iterator< E > > { return self; }

    public abstract has_prev() -> Bool;

    public abstract prev() ~ -> E;

##    /** Replaces the value returned by the most-recent call to next() / prev(). Returns the replaced element. */
##    public abstract set( element : E ) -> E;
}
