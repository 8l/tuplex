## Tests building nested types with VALUE type parameters.

type ~ Matrix<E, R : UInt, C : UInt> {
    type ~ Row : Array<E, (C)>;

    rows : ~Array< ~Row, (R) >;

    ##self( other : &Matrix<E,(R),(C)> ) {
    self( other : &Self ) {
        self.rows = other.rows;
    }

    self() {
    }
}

make_matrix( rows : UInt, cols : UInt ) -> &Matrix {
    m := new ~Matrix<~Int, (rows), (cols)>();

    ci : ~UInt = 0;
    while ci < cols {
        m.rows[0][ci] = Int(ci);
        ci = ci + 1;
    }

    return m;
}

main()->Int {
    type Mat : Matrix<Int, (2), (3)>;
    m : Mat;
    
    return 0;
}
