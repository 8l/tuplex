## Tests building nested types with VALUE type parameters.

type ~Matrix<E, R : UInt, C : UInt> {
    type ~ Row : Array<E, (C)>;

    rows : ~Array< ~Row, (R) >;

    ##self( other : &Matrix<E,(R),(C)> ) {
    self( other : &Self ) {
        self.rows = other.rows;
    }

    self() {
    }
}

make_matrix( rows : UInt, cols : UInt ) -> &Matrix<~Int> {
    m := new ~Matrix<~Int, (rows), (cols)>();

    ci : ~UInt = 0;
    while ci < cols {
        m.rows[0][ci] = Int(ci);
        ci = ci + 1;
    }

    return m;
}

main()->Int {
    rows : UInt = 2;
    cols : UInt = 3;

    m := make_matrix( rows, cols );
    sum : ~Int = 0;
    ci : ~UInt = 0;
    while ci < cols {
        sum = sum + m.rows[0][ci];
        ci = ci + 1;
    }

    copy := m;

    #experr 1: badstack := <Matrix<Int, (rows+1), (cols)>>( m );
    stack := <Matrix<Int, (rows), (cols)>>( m );

    heap := new Matrix<Int, (rows), (cols)>( m );

##    type ~Mat : Matrix<Int, (rows), (cols)>;
##    mymat : Mat;

    return sum;
}
