module my

CONSTANT := 42;

#experr: bad tokens;

#experr: CONSTANT2 : Int = 3.14;  ## bad type conversion

#experr: type MyType UnknownType;

#experr 2: type MyType2 derives Tuple {
    static FOO : Int = 2.73;  ## bad type conversion
    static BAR := 7  ## missing semicolon
}

#experr: bad_func();

#experr: bad_func() {
    return 42;
}

main()->Int {
    #experr: bad tokens;

    ~i := 3;

    #experr: i = i + 3 bad tokens;

    #experr: {
        i = i + 3 ## missing semicolon
    }

    #experr: {
        i = i + 3 ## missing semicolon
        i = i + 3;
    }

    #experr 3: {
        i = i + 3 bad tokens;
        i = i + 3.0;  ## bad type conversion
        i = i + 3 ## missing semicolon
    }

    assert i == 3;

    return 0;
}
