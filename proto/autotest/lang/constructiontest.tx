
type AType mod derives Tuple {
    field1 : Long;
    field2 : Float;
    field3 : ~Bool;

    public self() {
        self(17, 3.14);
        self^.field3 = FALSE;
    }
    public self(f1 : Long, f2 : Float) {
        if (f1 < 0) {
            self^.field1 = f1;
        } else
            self^.field1 = -f1;
        self^.field2 = f2;
        self^.field3 = TRUE;
    }

    public method(a : Int)->Int {
        return a * 2;
    }
}

type BType mod derives AType {
    field4 : Double;

    public self(f4 : Double) {
        super();
        self^.field4 = f4;
    }
    public self(f1 : Long, f2 : Float) {
        super(f1, f2);
        self^.field4 = f2;
    }

    public override method(a : Int)->Int {
        return super^.method( a ) * 2;
    }
}

object_construction()->Int {
    stackObj := AType();  ## FIXME: allocates twice & copies!
    assert stackObj.field1 == -17;
    assert stackObj.field2 == 3.14;
    assert stackObj.field3 == FALSE;

    ##stackRef := ~&~AType(&stackObj);

    heapObj1 := new AType();
    assert heapObj1^.field1 == -17;
    assert heapObj1^.field2 == 3.14;
    assert heapObj1^.field3 == FALSE;

    heapObj2 := new AType(2, 2.71);
    assert heapObj2^.field1 == -2;
    assert heapObj2^.field2 == 2.71;
    assert heapObj2^.field3 == TRUE;

    heapObj3 := new BType(1.1);
    assert heapObj3^.field1 == -17;
    assert heapObj3^.field2 == 3.14;
    assert heapObj3^.field3 == FALSE;
    assert heapObj3^.field4 == 1.1;

    heapObj4 := new BType(101, 2.71);
    assert heapObj4^.field1 == -101;
    assert heapObj4^.field2 == 2.71;
    assert heapObj4^.field3 == TRUE;
    assert heapObj4^.field4 == 2.71;

    ## constructors aren't inherited:
    #experr 2: bad1 := BType();  
    #experr  : bad2 := new BType();  

    return heapObj4^.method( 2 );
}

builtin_construction()->Int {
    stackBool := Bool(FALSE);
    heapBool := new Bool(TRUE);
    assert stackBool == FALSE;
    assert heapBool^ == TRUE;

    stackInt := Int(-1);
    heapInt := new Int(2);
    assert stackInt == -1;
    assert heapInt^ == 2;

    stackDouble := Double(-123.456);
    heapDouble := new Double(3.141592);
    assert stackDouble == -123.456;
    assert heapDouble^ == 3.141592;

    heapVar : &~Int = new ~Int(0);
    heapVar^ = 2;
    assert heapVar^ == 2;

    /*
    heapRef := <Ref<Scalar>>(heapVar);
    heapRef := <&Scalar>(heapVar);
    heapRef := new Ref<Scalar>(heapVar);

    heapRef : &~&~Int = new ~&~Int(heapVar);
    heapRef^ = heapVar;
    heapArr := new Array<Int,100>();
    return heapRef^^;
    */
    return heapVar^;
}

mod_test()->Int {
    ~iv := Int(3);
    iv = 4;
    ~ir := new ~Int(3);
    ir^ = 4;
    ir = new ~Int(5);
    iv2 := (new Int(3))^ + Int(3);
    return iv + ir^ + iv2;
}

main()->Int {
    ret0 := mod_test();
    assert ret0 == 15;

    ret1 := object_construction();
    assert ret1 == 8;

    ret2 := builtin_construction();
    assert ret2 == 2;

    return 0;
}
