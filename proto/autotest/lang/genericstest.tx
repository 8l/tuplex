module my

##import tx.proto.print.*

public type MARef<T> : &T;

public type MBRef<T> : Ref<T>;

public type MCRef<T> derives Ref<T> {
    static SFIELD := 3;
}

public type MDRef<T derives Any> : Ref<T>;

public type MERef<T derives Any> derives Ref<T> {
    static SFIELD := 3;
}

public type MFRef<Q> : Ref<Q>;
public type MGRef<T> : MFRef<T>;


public type NAArray<E> : [10]E;

public type NBArray<E> : Array<E,10>;

public type NCArray<E> derives Array<E,10> {
}



type Type<E,F> derives Tuple {
    var : &E;
}

type SType<E,G> : Type<E,G>;

generics_test()->Int {
    type LocalTypeX : SType<~Float,~Double>;
    type LocalTypeY : SType<~Int,~Long>;
    type LocalTypeZ : SType<~Int,~Long>;
    x : LocalTypeX;
    y : LocalTypeY;

    xe1 : x.E           = 1.;
    xe2 : x.my#SType#E  = 2.;
    xe3 : x.my#Type#E   = 4.;
    xg1 : x.G           = 8.;
    xg2 : x.my#SType#G  = 16.;
    xg3 : x.my#Type#F   = 32.;

    ye1 : y.E           = 1;
    ye2 : y.my#SType#E  = 2;
    ye3 : y.my#Type#E   = 4;
    yg1 : y.G           = 8;
    yg2 : y.my#SType#G  = 16;
    yg3 : y.my#Type#F   = 32;

    assert xe1 == 1.;
    assert xe2 == 2.;
    assert xe3 == 4.;
    assert xg1 == 8.;
    assert xg2 == 16.;
    assert xg3 == 32.;

    assert ye1 == 1;
    assert ye2 == 2;
    assert ye3 == 4;
    assert yg1 == 8;
    assert yg2 == 16;
    assert yg3 == 32;

    return 0;
}

/*
dynamic_generics_test(len : UInt)->Int {
    type DynamicType SType<Float,(len)>;
    a : DynamicType;
    return Int(a.K);
}
*/

main()->Int {
    var : Float = 13.2;
    varr := &var;
    varr2 : MGRef<Float> = varr;
    assert varr2^ == 13.2;

    generics_test();
    
    return 0;
}


/*

Array<E,L> {
    generic type E;
    generic L Int;
}

Subtype<F,K> derives Array<Ref<F>,(K+1)> {
    generic type F;
    generic K Int;

    ## reinterpretation in usage scope via alias:
    type tx#Array#E is Ref<Subtype.F>;

    ## reinterpretation in usage scope via reentrant expr?
    ## that still only supports static values though
    tx#Array#L is Subtype.K+1;
}

ConcreteType derives Subtype<Int, 2> {
    type Subtype#F Int;
    Subtype#K := 2;
}

*/