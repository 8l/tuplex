
type CompoundType mod derives Tuple {
    public static SFIELD := -1;
    static SFIELD2 := 2.73;
    field1 : ~Long;
    field2 : ~Float;
    protected field3 : [20]Int;
    ##public field4 := c"abra" ## not yet supported
    field5 : ~InnerCompType;
    field6 : ~&~InnerCompType;
    type InnerCompType mod derives Tuple {
        static PI := 3.14;
        blaha : ~Float;
    }
}

type Subtype mod derives CompoundType {
    ##subfield1 : ~Long;
}

testfunc() {
    {
        good : tx.Int;
        #experr 2: bad : unknown;
        #experr 1: bad : $local.CompoundType;  ## not explicitly referenceable
        #experr 2: bad : tx;
        #experr 2: bad : tx.c;
        #experr 2: bad : tx.c.puts;
        #experr 2: bad : tx.unknown;
    }

    obj : ~CompoundType;
    obj.field1 = 133;
    obj.field2 = CompoundType.SFIELD2 * 10.;
    assert obj.field1 == 133;
    assert obj.field2 == 27.3;
    var := obj.field2;
    assert var == 27.3;

    robj : ~&~CompoundType;
    robj = &obj;
    assert robj^.field1 == obj.field1;
    assert robj^.field2 == obj.field2;

    robj^.field5.blaha = 273.;
    assert obj.field5.blaha == 273.;

    assert CompoundType.InnerCompType.PI == 3.14;
    subobj1 : ~CompoundType.InnerCompType;
    subobj2 : ~obj.InnerCompType;
    assert subobj1.PI == 3.14;
    assert subobj2.PI == 3.14;
    obj.field6 = &subobj1;
    obj.field6^.blaha = 513.;
    obj.field6 = &subobj2;
    obj.field6^.blaha = 514.;
    assert subobj1.blaha == 513.;
    assert subobj2.blaha == 514.;

    #experr: bad1 : Long = CompoundType.field1;
    #experr: bad2 := obj.InnerCompType;
    #experr 2: bad3 : CompoundType.SFIELD2;  ## implicit type entity may not be available
    #experr 2: bad4 : CompoundType.field4;   ## implicit type entity may not be available
    #experr 2: bad5 : ~CompoundType.field3;  ## implicit type entity may not be available
}

main() {
    testfunc();
}



/*
## Implicit type declaration:

func somefunc() tuple { a : Int, b : Ref<Foo> }

myref : ~Ref<tuple { a : Int, b : Ref<Foo> }>

func otherfunc() myref.T

myref = somefunc()

## implicit:
myref$type$T$b : Ref<Foo>
myref$type$T   : Tuple{ a : Int, b : myref$T$b$type }
myref$type     : Ref<myref$T$type>

## valid members:
myref.T is myref$type$T
myref.a
myref.b


## Type resolution is static and non-polymorhic
Type . Type
SFIELD . Type  => decltype(SFIELD).TYPE
field . Type   => decltype(field).TYPE
ref . Type     => decltype(ref).TYPE

## The types of all the following are determined statically:
Type . SFIELD  ## of course non-polymorphic
Type . field   ## invalid; produces field's declared type

SFIELD . SFIELD  ## "polymorphic" (but statically known)
SFIELD . field   ## non-polymorphic

field . SFIELD  ## "polymorphic" (but statically known)
field . field   ## non-polymorphic

ref . SFIELD  ## polymorphic     (determined by the actual object type)
ref . field   ## non-polymorphic (determined by the declared type of ref)

*/
