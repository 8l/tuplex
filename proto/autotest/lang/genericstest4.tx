## tests nested generic types and handling of "concreteness" of their code generation

type Outer<S> {
    #experr 1: static statErrMemb : S;  ## static members dependent on type parameters not supported (how would they be initialized?)
    static statMemb : Byte = 14B;
    instMemb : S;
    trivMemb : Int;

    funcA( a : Int ) -> Int { return a; }
    funcB( a : S ) -> S { return a; }

    /** indirectly dependent on Outer's type parameters, i.e. indirectly generic */
    type Inner {
        static statMemb : Int = 32;
        instMemb : S;
        trivMemb : Int;
        thatMemb : Outer<S>;

        funcA( a : Int ) -> Int { return a; }
        funcB( a : S ) -> S { return a; }
    }

    /** Independent on Outer's type parameters, i.e. theoretically always concrete and the same.
     * However we currently treat all entities within a generic type as distinct per specialization. */
    type Indep {
        static statMemb : Float = 1.1;
        instMemb : Float;
        trivMemb : Int;

        funcA( a : Int ) -> Int { return a; }
        funcB( a : Float ) -> Float { return a; }
    }

    /** Nested generic type. */
    type Nested<T,U> {
        static statMemb : Float = 1.1;
        instS : S;
        instT : T;
        instU : U;

        funcS() -> S { return self.instS; }
        funcT() -> T { return self.instT; }
        funcU() -> U { return self.instU; }
    }
}

test_nested() {
    n1 : Outer<Long>.Nested<Byte, Short>;
    
    type Redecl<W> derives Outer<Long>.Nested<Byte,W>;
    n2 : Redecl<Short>;
}

main()->Int {
    ## can't instantiate non-concrete types:
    #experr: ve : Outer;
    #experr: ve : Outer<Array>;
    #experr: ve : Outer.Inner;
    #experr: ve : Outer<Array>.Inner;

    v1a : Outer<Float>;
    v2a : v1a.Inner;
    v3a : Outer<Float>.Inner = v2a;

    type OuterFl : Outer<Float>;
    v1b : OuterFl;
    v2b : v1b.Inner;
    v3b : OuterFl.Inner = v3a;
    
    ## explicitly named types are considered distinct:
    #experr 1: ve : OuterFl = v1a;
    #experr 1: ve : Outer<Float> = v1b;

    v10 : Outer.Indep;
    v11 : OuterFl.Indep;
    ## we currently treat all entities within a generic type as distinct per specialization:
    #experr 1: ve : &Outer.Indep = &v11;

    return 0;
}