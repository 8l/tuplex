module my

import tx.proto.print.*

type Node derives Tuple {
    parent : Ref<Node>

    self() {  ## creates root
        self^.parent = self  ## UNSAFE if obj copied
    }
    self(parent : Ref<Node>) {
        self^.parent = parent
    }

    get_parent() Ref<Node> {
        return self^.parent
    }

    is_root() Bool {
        return self == self^.parent
    }

    get_depth() Int {
        if self^.is_root()
            return 0
        return self^.get_parent()^.get_depth() + 1
    }
}

/*
type A {
    br : &B
}
type B {
    ar : &A
}
*/

main() Int {
    ##root   := Node()  ## allocates twice & copies!
    root   := new Node()
    child1 := new Node(root)
    child2 := new Node(child1)
    return child2^.get_depth()
}
