module my

type CompA derives Interface {
    public abstract get_value() Int
}

/* future syntax?
interface CompB {
    public abstract get_value() Int
}
*/

type Type derives Tuple, CompA {
    fld : Int

    self(f : Int) { self^.fld = f }

    public get_value() Int {
        return self^.fld
    }
}

main() Int {
    t := Type(32)
    r : &CompA = &t
    return r^.get_value()
}
