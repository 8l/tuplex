
module my.namesp

import tx.*
import tx.c.puts

myfield : tx.Int = 17

sndField : tx.Int = -3+4

trdField : tx.Int = 3
## trdField : tx.Int = 5

module my.namesp.submod {
    subField : Int = 42
}

## myfuncptr : mod func(a : tx.Int, b : tx.Int) tx.Int

func myfunc(a : tx.Int,
            b : tx.Int) tx.Int {
        r : tx.Int = a - -b
        return r
}


helloWorld := c"hello world!"
helloWorld2 := helloWorld

func puts(str : &[]UByte) {
    tx.c.puts(str^[0])
}

func str_test() {
    puts(helloWorld)
    str := c"local string"
    str2 := str
    puts(str)
    puts(str2)
    ##puts(helloWorld2)
}

func empty_func() { }

func main() Int {
    i : mod tx.Int = 2
    flag : mod tx.Bool = FALSE
    flag = 42 < 40+3
    if Int(42.) != 40+2 {
        str := c"it was TRUE!"
        puts(str)
    }
    else {
        strRef := &c"it was FALSE!"
        puts(strRef)
    }
    ## myfunc = myfunc2
    str_test()
    result : ~Int = my.namesp.myfunc( myfield, sndField )
    result2 := myfunc( result, trdField )
    result = result + 1
    return result + result2 + my.namesp.submod.subField
}
