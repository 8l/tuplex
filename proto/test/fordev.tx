## step-by-step support for ranges, arrays, sequences, and for-loops 

## var-arg functions:
var_func( x : UInt, vars : Float... ) -> UInt {
    return vars.L;  ## number of var-args passed
}


## Array literals:
## array_literal :=    ‘[‘ expr_list ‘]’
## Future: expansion operator '...'

foofunc( array : &[]UByte ) { }

foofunc( array : &[]Int ) { }


array_construction( i : UByte ) {
    a0 := [ i, i, i ];
    a1 := [ 1, 2, 3 ];
    a2 := [ Int(1), 2, 3 ];
    #experr 1: ae := [];  ## invalid, no element type info

    a3 := [3]Int( 1, 2, 3 );
    a4 := []Int( 1, 2, 3 );
    a5 := []Int();  ## empty array of Ints
    #experr 1: ae := [2]Int( 1, 2, 3 );
    #experr 1: ae := [4]Int( 1, 2, 3 );
    #experr 2: ae := [2.5]Int( 1, 2, 3 );
    #experr 2: ae := [i]Int( 1, 2, 3 );

    foofunc( a0 );
    foofunc( a1 );
    foofunc( a2 );
    foofunc( a3 );
    foofunc( a4 );
    foofunc( a5 );

/* requires var-arg constructors:
    aa := <Array<Int,3>>( 1, 2, 3 );
    aa := <Array<Int>>( 1, 2, 3 );
    aa := <Array<>>( 1, 2, 3 );  ## support?
    aa := <Array>( 1, 2, 3 );    ## support?

    aa := new [3]Int( 1, 2, 3 );
    aa := new []Int( 1, 2, 3 );
    aa := new []Int();
    aa := new Array<Int,3>( 1, 2, 3 );
    aa := new Array<Int>( 1, 2, 3 );
    aa := new Array<Int>();
*/

##  FUTURE: In-place expansion of sequences:
##  aa := Array<Int>( 1, 2, 3, a1... );
}



/*
for_loops() {
    for i in 0:10 {
    }

    for i in 0:9,
        j in 9:-1:0 {
    }

    for i, iter in str[0:9] {
        print(i)
        if i == 'a'
            iter.next()
    }
}
*/

main() -> Int {
    n := var_func( 0, 1.1, 2.2, 3.3 );
    array_construction( 1 );
    return Int( n );
}
