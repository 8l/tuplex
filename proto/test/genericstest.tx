##import tx.proto.print.*

public type MARef<T> &T

public type MBRef<T> Ref<T>

public type MCRef<T> derives Ref<T> {
    static SFIELD := 3
}

public type MDRef<T derives Any> Ref<T>

public type MERef<T derives Any> derives Ref<T> {
    static SFIELD := 3
}

public type MFRef Ref
public type MGRef<T> MFRef<T>


public type NAArray<E> [10]E

public type NBArray<E> Array<E,10>

public type NCArray<E> derives Array<E,10> {
}

/* doesn't work since doesn't recognize L as constant
public type OAArray<L:UInt> [L]UByte

public type OBArray<L:UInt> Array<UByte,(L)>

public type OCArray<L:UInt> derives Array<UByte,(L)> {
}
*/


##public type OTestString derives Array<Array<UByte,10>,10> {
##}

public type PType<E derives Any,L:Int> {
}

public type PTypeSub PType<Int,4>

    
func main() Int {
    var : Float = 13.2
    varr := &var
    varr2 : MGRef<Float> = varr

    type TestType Int
    foo : TestType = 10
    bar : PTypeSub.E = foo

    ##str : OTestString
    ##return Int(NCArray.L)
    
    return 0
}
