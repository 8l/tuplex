module tx



/** A sequenceable object supports step-wise single direction traversal of its contained elements.
 */
public interface Sequenceable< E > derives Interface {
    
    public abstract sequencer() -> Ref< ~Sequencer< E > >;
}



/** An iterable sequence supports step-wise forward and backward traversal.
 */
public interface Iterable< E > derives Sequenceable< E > {

    public abstract override sequencer() -> Ref< ~Iterator< E > >;
}



/** An indicable sequence is finite and supports random-access.
 * Sequences, sets, and maps are Indicable.
 */
public interface Indicable< K, E > derives Iterable< E > {

    public abstract count() -> ULong;

    public abstract has( key : K ) -> Bool;

    public abstract get( key : K ) -> E;
}




public interface Sequencer< E > derives Sequenceable< E > {

    public override sequencer() -> Ref< ~Sequencer< E > > { return self; }

    public abstract has_next() -> Bool;

    public abstract next() -> E;
}



public interface Iterator< E > derives Sequencer< E > {

    public override sequencer() -> Ref< ~Iterator< E > > { return self; }

    public abstract has_prev() -> Bool;

    public abstract prev() -> E;
}




/*=====  modifiable variants =====*/
/*

/** An updateable sequence supports replacing its elements.
 */
public interface Updateable< E > derives Sequenceable< E > {

    public abstract override sequencer() -> Ref< ~Updater< E > >;
}


public interface Updater< E > derives Sequencer<E> {

    public override sequencer() -> Ref< ~Updater< E > > { return self; }

    /** replaces value returned by most-recent call to next() / prev() */
    public abstract update( newValue : E );
}




/** A sequence that is both indicable and updateable.
 */
public interface Writable< K, E > derives Indicable< K, E >, Updateable< E > {

    public abstract override sequencer() -> Ref< ~Writer< E > >;

    /** Sets the element at the slot identified by key. */
    public abstract set( key : K, element : E );
}


public interface Writer< E > derives Iterator<E>, Updater<E> {

    public override sequencer() -> Ref< ~Writer< E > > { return self; }
}
*/