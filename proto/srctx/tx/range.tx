module tx


public interface Enumerable< E derives Enumerable<E> > derives Comparable< E > {

    /** returns the last (highest) ordinal for this type */
    public static abstract last_ordinal() -> UInt;

    /** returns the value for the specified ordinal (panics upon out-of-bounds) */
    public static abstract value( ordinal: UInt ) -> E;


    /** returns the ordinal for this value */
    public abstract ordinal() -> UInt;

    public static first() -> E {
        return E.value( 0 );
    }

    public static last() -> E {
        return E.value( E.last_ordinal() );
    }
}



public interface Range< E > derives Indicable< UInt, E > {

    public abstract override sequencer() -> Ref< ~Iterator<E> >;

    public abstract override count() -> ULong;

    public abstract override has( key : UInt ) -> Bool;

    public abstract override get( key : UInt ) -> E;


    public abstract last_index() -> UInt;
}



/** A range between two values of an Enumerable type. */
public type ERange< E derives Enumerable<E> > derives Tuple, Range< E > {

    /** The ERange iterator. */
    public type ERangeIterator derives Tuple, Iterator< E > {
        range   : &ERange<E>;
        nextIndex : ~UInt;

        public self( range : &ERange<E> ) {
            self.range = range;
            self.nextIndex = 0;
        }

        public override sequencer() -> Ref< ~ERangeIterator > {
            return self;
        }

        public override has_next() -> Bool {
            return self.nextIndex <= self.range.last_index();
        }
    
        public override has_prev() -> Bool {
            return self.nextIndex > 0;
        }

        public override next() -> E {
            n := self.nextIndex;
            self.nextIndex = self.nextIndex + 1;
            return self.range.get( n );
        }
    
        public override prev() -> E  {
            self.nextIndex = self.nextIndex - 1;
            return self.range.get( self.nextIndex );
        }
    }

    _last : UInt;

    public start : E;
    public end   : E;
    public step  : Long;

    public self( start : E, end : E, step : Long ) {
        self.start = start;
        self.end = end;
        self.step = step;

        ## FIXME: review
        if self.step >= 0:
            self._last = UInt( ( Long( self.end.ordinal() )   - self.start.ordinal() + 1L ) / self.step );
        else
            self._last = UInt( ( Long( self.start.ordinal() ) - self.end.ordinal()   + 1L ) / -self.step );
    }

    public override sequencer() -> Ref< ~ERangeIterator > {
        return new ~ERangeIterator( self );
    }

    public override count() -> ULong {
        return ULong( self._last ) + 1;
    }
    public override has( index : UInt ) -> Bool {
        return ( index <= self._last );
    }
    public override get( index : UInt ) -> E {
        assert index <= self._last;
        return E.value( self.start.ordinal() + UInt( index * self.step ) );
    }

    public override last_index() -> UInt {
        return self._last;
    }
}
